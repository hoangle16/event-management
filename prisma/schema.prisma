// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  email String @unique
  password String
  fullName String
  role Role @default(USER)
  verified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets Ticket[]
  events Event[]
  VerificationToken VerificationToken[]
}

enum Role {
  ADMIN
  ORGANIZER
  USER
}

model VerificationToken {
  id String @id @default(uuid())
  token String @unique
  type TokenType
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Event {
  id String @id @default(uuid())
  name String
  description String?
  venue String
  eventDate DateTime
  saleStart DateTime
  saleEnd DateTime
  maxTickets Int
  remainingTickets Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  tickets Ticket[]
}

model Ticket {
  id String @id @default(uuid())
  ticketCode String @unique
  type String
  price Float
  bookedAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  event Event @relation(fields: [eventId], references: [id])
  eventId String
  payment Payment?
}

model Payment {
  id String @id @default(uuid())
  paymentCode String @unique
  amount Float
  status PaymentStatus @default(PENDING)
  method String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket Ticket @relation(fields: [ticketId], references: [id])
  ticketId String @unique
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}